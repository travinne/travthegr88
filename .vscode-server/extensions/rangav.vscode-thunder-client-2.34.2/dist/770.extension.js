"use strict";exports.id=770,exports.ids=[770],exports.modules={1059:(e,r,t)=>{t.d(r,{fromIni:()=>u});var n=t(62),o=t(61),i=t(70);const s=e=>(0,i.g)(e,"CREDENTIALS_PROFILE_NAMED_PROVIDER","p"),a=(e,{profile:r,logger:t})=>{const n="string"==typeof e.source_profile&&void 0===e.credential_source;return n&&t?.debug?.(`    ${r} isAssumeRoleWithSourceProfile source_profile=${e.source_profile}`),n},c=(e,{profile:r,logger:t})=>{const n="string"==typeof e.credential_source&&void 0===e.source_profile;return n&&t?.debug?.(`    ${r} isCredentialSourceProfile credential_source=${e.credential_source}`),n},l=async(e,r,a,c={})=>{a.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");const l=r[e],{source_profile:d,region:p}=l;if(!a.roleAssumer){const{getDefaultRoleAssumer:e}=await t.e(97).then(t.bind(t,1067));a.roleAssumer=e({...a.clientConfig,credentialProviderLogger:a.logger,parentClientConfig:{...a?.parentClientConfig,region:p??a?.parentClientConfig?.region}},a.clientPlugins)}if(d&&d in c)throw new o.C1(`Detected a cycle attempting to resolve credentials for profile ${(0,n.Bz)(a)}. Profiles visited: `+Object.keys(c).join(", "),{logger:a.logger});a.logger?.debug("@aws-sdk/credential-provider-ini - finding credential resolver using "+(d?`source_profile=[${d}]`:`profile=[${e}]`));const u=d?g(d,r,a,{...c,[d]:!0},f(r[d]??{})):(await((e,r,n)=>{const i={EcsContainer:async e=>{const{fromHttp:r}=await t.e(963).then(t.bind(t,1063)),{fromContainerMetadata:i}=await t.e(330).then(t.bind(t,1062));return n?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),async()=>(0,o.cy)(r(e??{}),i(e))().then(s)},Ec2InstanceMetadata:async e=>{n?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");const{fromInstanceMetadata:r}=await t.e(330).then(t.bind(t,1062));return async()=>r(e)().then(s)},Environment:async e=>{n?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");const{fromEnv:r}=await Promise.resolve().then(t.bind(t,71));return async()=>r(e)().then(s)}};if(e in i)return i[e];throw new o.C1(`Unsupported credential source in profile ${r}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:n})})(l.credential_source,e,a.logger)(a))();if(f(l))return u.then((e=>(0,i.g)(e,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o")));{const r={RoleArn:l.role_arn,RoleSessionName:l.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:l.external_id,DurationSeconds:parseInt(l.duration_seconds||"3600",10)},{mfa_serial:t}=l;if(t){if(!a.mfaCodeProvider)throw new o.C1(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:a.logger,tryNextLink:!1});r.SerialNumber=t,r.TokenCode=await a.mfaCodeProvider(t)}const n=await u;return a.roleAssumer(n,r).then((e=>(0,i.g)(e,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o")))}},f=e=>!e.role_arn&&!!e.credential_source,d=e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.aws_access_key_id&&"string"==typeof e.aws_secret_access_key&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1&&["undefined","string"].indexOf(typeof e.aws_account_id)>-1,p=async(e,r)=>{r?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");const t={accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token,...e.aws_credential_scope&&{credentialScope:e.aws_credential_scope},...e.aws_account_id&&{accountId:e.aws_account_id}};return(0,i.g)(t,"CREDENTIALS_PROFILE","n")},g=async(e,r,n,s={},f=!1)=>{const g=r[e];if(Object.keys(s).length>0&&d(g))return p(g,n);if(f||((e,{profile:r="default",logger:t}={})=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1&&["undefined","string"].indexOf(typeof e.external_id)>-1&&["undefined","string"].indexOf(typeof e.mfa_serial)>-1&&(a(e,{profile:r,logger:t})||c(e,{profile:r,logger:t})))(g,{profile:e,logger:n.logger}))return l(e,r,n,s);if(d(g))return p(g,n);if(u=g,Boolean(u)&&"object"==typeof u&&"string"==typeof u.web_identity_token_file&&"string"==typeof u.role_arn&&["undefined","string"].indexOf(typeof u.role_session_name)>-1)return(async(e,r)=>t.e(522).then(t.bind(t,1061)).then((({fromTokenFile:t})=>t({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:r.roleAssumerWithWebIdentity,logger:r.logger,parentClientConfig:r.parentClientConfig})().then((e=>(0,i.g)(e,"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN","q"))))))(g,n);var u;if((e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.credential_process)(g))return(async(e,r)=>t.e(114).then(t.bind(t,1060)).then((({fromProcess:t})=>t({...e,profile:r})().then((e=>(0,i.g)(e,"CREDENTIALS_PROFILE_PROCESS","v"))))))(n,e);if((e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name))(g))return await(async(e,r,n={})=>{const{fromSSO:o}=await t.e(476).then(t.bind(t,1058));return o({profile:e,logger:n.logger,parentClientConfig:n.parentClientConfig,clientConfig:n.clientConfig})().then((e=>r.sso_session?(0,i.g)(e,"CREDENTIALS_PROFILE_SSO","r"):(0,i.g)(e,"CREDENTIALS_PROFILE_SSO_LEGACY","t")))})(e,g,n);throw new o.C1(`Could not resolve credentials using profile: [${e}] in configuration/credentials file(s).`,{logger:n.logger})},u=(e={})=>async({callerClientConfig:r}={})=>{const t={...e,parentClientConfig:{...r,...e.parentClientConfig}};t.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");const o=await(0,n.YU)(t);return g((0,n.Bz)({profile:e.profile??r?.profile}),o,t)}}};