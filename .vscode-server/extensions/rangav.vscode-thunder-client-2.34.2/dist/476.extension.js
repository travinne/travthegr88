"use strict";exports.id=476,exports.ids=[476],exports.modules={1058:(e,s,o)=>{o.d(s,{fromSSO:()=>u});var t=o(61),n=o(62);var r=o(70);const i="To refresh this SSO session run 'aws sso login' with the corresponding profile.",a=async(e,s,t={})=>{const{CreateTokenCommand:n}=await o.e(622).then(o.bind(o,1065)),r=await(async(e,s={})=>{const{SSOOIDCClient:t}=await o.e(622).then(o.bind(o,1065));return new t(Object.assign({},s.clientConfig??{},{region:e??s.clientConfig?.region,logger:s.clientConfig?.logger??s.parentClientConfig?.logger}))})(s,t);return r.send(new n({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))},c=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new t.Jh(`Token is expired. ${i}`,!1)},l=(e,s,o=!1)=>{if(void 0===s)throw new t.Jh(`Value not present for '${e}' in SSO Token${o?". Cannot refresh":""}. ${i}`,!1)};var f=o(10);const{writeFile:w}=f.promises,g=new Date(0),d=(e={})=>async({callerClientConfig:s}={})=>{const o={...e,parentClientConfig:{...s,...e.parentClientConfig}};o.logger?.debug("@aws-sdk/token-providers - fromSso");const r=await(0,n.YU)(o),f=(0,n.Bz)({profile:o.profile??s?.profile}),d=r[f];if(!d)throw new t.Jh(`Profile '${f}' could not be found in shared credentials file.`,!1);if(!d.sso_session)throw new t.Jh(`Profile '${f}' is missing required property 'sso_session'.`);const h=d.sso_session,S=(await(0,n.qw)(o))[h];if(!S)throw new t.Jh(`Sso session '${h}' could not be found in shared credentials file.`,!1);for(const e of["sso_start_url","sso_region"])if(!S[e])throw new t.Jh(`Sso session '${h}' is missing required property '${e}'.`,!1);S.sso_start_url;const u=S.sso_region;let p;try{p=await(0,n.vf)(h)}catch(e){throw new t.Jh(`The SSO session token associated with profile=${f} was not found or is invalid. ${i}`,!1)}l("accessToken",p.accessToken),l("expiresAt",p.expiresAt);const{accessToken:y,expiresAt:C}=p,k={token:y,expiration:new Date(C)};if(k.expiration.getTime()-Date.now()>3e5)return k;if(Date.now()-g.getTime()<3e4)return c(k),k;l("clientId",p.clientId,!0),l("clientSecret",p.clientSecret,!0),l("refreshToken",p.refreshToken,!0);try{g.setTime(Date.now());const e=await a(p,u,o);l("accessToken",e.accessToken),l("expiresIn",e.expiresIn);const s=new Date(Date.now()+1e3*e.expiresIn);try{await((e,s)=>{const o=(0,n.C9)(e),t=JSON.stringify(s,null,2);return w(o,t)})(h,{...p,accessToken:e.accessToken,expiresAt:s.toISOString(),refreshToken:e.refreshToken})}catch(e){}return{token:e.accessToken,expiration:s}}catch(e){return c(k),k}},h=!1,S=async({ssoStartUrl:e,ssoSession:s,ssoAccountId:i,ssoRegion:a,ssoRoleName:c,ssoClient:l,clientConfig:f,parentClientConfig:w,profile:g,logger:S})=>{let u;const p="To refresh this SSO session run aws sso login with the corresponding profile.";if(s)try{const e=await d({profile:g})();u={accessToken:e.token,expiresAt:new Date(e.expiration).toISOString()}}catch(e){throw new t.C1(e.message,{tryNextLink:h,logger:S})}else try{u=await(0,n.vf)(e)}catch(e){throw new t.C1(`The SSO session associated with this profile is invalid. ${p}`,{tryNextLink:h,logger:S})}if(new Date(u.expiresAt).getTime()-Date.now()<=0)throw new t.C1(`The SSO session associated with this profile has expired. ${p}`,{tryNextLink:h,logger:S});const{accessToken:y}=u,{SSOClient:C,GetRoleCredentialsCommand:k}=await o.e(736).then(o.bind(o,1064)),_=l||new C(Object.assign({},f??{},{logger:f?.logger??w?.logger,region:f?.region??a}));let m;try{m=await _.send(new k({accountId:i,roleName:c,accessToken:y}))}catch(e){throw new t.C1(e,{tryNextLink:h,logger:S})}const{roleCredentials:{accessKeyId:T,secretAccessKey:x,sessionToken:O,expiration:N,credentialScope:$,accountId:I}={}}=m;if(!(T&&x&&O&&N))throw new t.C1("SSO returns an invalid temporary credential.",{tryNextLink:h,logger:S});const D={accessKeyId:T,secretAccessKey:x,sessionToken:O,expiration:new Date(N),...$&&{credentialScope:$},...I&&{accountId:I}};return s?(0,r.g)(D,"CREDENTIALS_SSO","s"):(0,r.g)(D,"CREDENTIALS_SSO_LEGACY","u"),D},u=(e={})=>async({callerClientConfig:s}={})=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");const{ssoStartUrl:o,ssoAccountId:r,ssoRegion:i,ssoRoleName:a,ssoSession:c}=e,{ssoClient:l}=e,f=(0,n.Bz)({profile:e.profile??s?.profile});if(o||r||i||a||c){if(o&&r&&i&&a)return S({ssoStartUrl:o,ssoSession:c,ssoAccountId:r,ssoRegion:i,ssoRoleName:a,ssoClient:l,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:f});throw new t.C1('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger})}{const s=(await(0,n.YU)(e))[f];if(!s)throw new t.C1(`Profile ${f} was not found.`,{logger:e.logger});if(!(w=s)||"string"!=typeof w.sso_start_url&&"string"!=typeof w.sso_account_id&&"string"!=typeof w.sso_session&&"string"!=typeof w.sso_region&&"string"!=typeof w.sso_role_name)throw new t.C1(`Profile ${f} is not configured with SSO credentials.`,{logger:e.logger});if(s?.sso_session){const r=(await(0,n.qw)(e))[s.sso_session],a=` configurations in profile ${f} and sso-session ${s.sso_session}`;if(i&&i!==r.sso_region)throw new t.C1("Conflicting SSO region"+a,{tryNextLink:!1,logger:e.logger});if(o&&o!==r.sso_start_url)throw new t.C1("Conflicting SSO start_url"+a,{tryNextLink:!1,logger:e.logger});s.sso_region=r.sso_region,s.sso_start_url=r.sso_start_url}const{sso_start_url:r,sso_account_id:a,sso_region:c,sso_role_name:g,sso_session:d}=((e,s)=>{const{sso_start_url:o,sso_account_id:n,sso_region:r,sso_role_name:i}=e;if(!(o&&n&&r&&i))throw new t.C1(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:s});return e})(s,e.logger);return S({ssoStartUrl:r,ssoSession:d,ssoAccountId:a,ssoRegion:c,ssoRoleName:g,ssoClient:l,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:f})}var w}}};