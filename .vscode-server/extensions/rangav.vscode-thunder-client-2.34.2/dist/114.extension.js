"use strict";exports.id=114,exports.ids=[114],exports.modules={1060:(e,r,o)=>{o.r(r),o.d(r,{fromProcess:()=>d});var t=o(62),n=o(61),s=o(34),i=o(13),c=o(70);const a=async(e,r,o)=>{const t=r[e];if(!r[e])throw new n.C1(`Profile ${e} could not be found in shared credentials file.`,{logger:o});{const a=t.credential_process;if(void 0===a)throw new n.C1(`Profile ${e} did not contain credential_process.`,{logger:o});{const t=(0,i.promisify)(s.exec);try{const{stdout:o}=await t(a);let n;try{n=JSON.parse(o.trim())}catch{throw Error(`Profile ${e} credential_process returned invalid JSON.`)}return((e,r,o)=>{if(1!==r.Version)throw Error(`Profile ${e} credential_process did not return Version 1.`);if(void 0===r.AccessKeyId||void 0===r.SecretAccessKey)throw Error(`Profile ${e} credential_process returned invalid credentials.`);if(r.Expiration){const o=new Date;if(new Date(r.Expiration)<o)throw Error(`Profile ${e} credential_process returned expired credentials.`)}let t=r.AccountId;!t&&o?.[e]?.aws_account_id&&(t=o[e].aws_account_id);const n={accessKeyId:r.AccessKeyId,secretAccessKey:r.SecretAccessKey,...r.SessionToken&&{sessionToken:r.SessionToken},...r.Expiration&&{expiration:new Date(r.Expiration)},...r.CredentialScope&&{credentialScope:r.CredentialScope},...t&&{accountId:t}};return(0,c.g)(n,"CREDENTIALS_PROCESS","w"),n})(e,n,r)}catch(e){throw new n.C1(e.message,{logger:o})}}}},d=(e={})=>async({callerClientConfig:r}={})=>{e.logger?.debug("@aws-sdk/credential-provider-process - fromProcess");const o=await(0,t.YU)(e);return a((0,t.Bz)({profile:e.profile??r?.profile}),o,e.logger)}}};