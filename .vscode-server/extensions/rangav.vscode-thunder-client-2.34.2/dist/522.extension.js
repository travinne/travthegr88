"use strict";exports.id=522,exports.ids=[522],exports.modules={1061:(e,o,n)=>{n.r(o),n.d(o,{fromTokenFile:()=>c,fromWebToken:()=>t});var r=n(70),i=n(61),s=n(10);const t=e=>async o=>{e.logger?.debug("@aws-sdk/credential-provider-web-identity - fromWebToken");const{roleArn:r,roleSessionName:i,webIdentityToken:s,providerId:t,policyArns:d,policy:c,durationSeconds:a}=e;let{roleAssumerWithWebIdentity:l}=e;if(!l){const{getDefaultRoleAssumerWithWebIdentity:r}=await n.e(97).then(n.bind(n,1067));l=r({...e.clientConfig,credentialProviderLogger:e.logger,parentClientConfig:{...o?.callerClientConfig,...e.parentClientConfig}},e.clientPlugins)}return l({RoleArn:r,RoleSessionName:i??`aws-sdk-js-session-${Date.now()}`,WebIdentityToken:s,ProviderId:t,PolicyArns:d,Policy:c,DurationSeconds:a})},d="AWS_WEB_IDENTITY_TOKEN_FILE",c=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-web-identity - fromTokenFile");const o=e?.webIdentityTokenFile??process.env[d],n=e?.roleArn??process.env.AWS_ROLE_ARN,c=e?.roleSessionName??process.env.AWS_ROLE_SESSION_NAME;if(!o||!n)throw new i.C1("Web identity configuration not specified",{logger:e.logger});const a=await t({...e,webIdentityToken:(0,s.readFileSync)(o,{encoding:"ascii"}),roleArn:n,roleSessionName:c})();return o===process.env[d]&&(0,r.g)(a,"CREDENTIALS_ENV_VARS_STS_WEB_ID_TOKEN","h"),a}}};